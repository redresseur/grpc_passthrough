syntax = "proto3";
package bridge;
import "google/protobuf/timestamp.proto";

// protoc -I=.\proto -I=D:\protoc\include\ --go_out=plugins=grpc:.\proto .\proto\pas
//s_through\pass_through.proto

// 用于grpc 透传过程中的引导服务
service Bridge {
    // 注册一个服务
    rpc RegisterService(RegisterRequest) returns (Respond){}

    // 开启监听服务
    rpc Listener (ListenerRequest) returns (stream ConnectNotify) {}

    // 请求连接
    rpc Connect(ConnectRequest)returns(Respond){}

    // 注册连接状态监听
    rpc RegisterEvent(EventRequest)returns (stream Event ) {}

    // 查询服务
    rpc Query(QueryRequest) returns (Respond){}

    // 用于检测连接状态
    rpc PingPong (Ping) returns (Pong) {}
}

message ServiceStatus{
    enum ServicesStatusCode{
        CREATE = 0;
        OFF = 1;
        // Listen = 3;
        ON = 2;
    }

    ServicesStatusCode status_code = 1;
    bytes payload = 2;
}

message EventRequest{
    enum EventType{
        SERVICE_EVENT = 0;
        CONNECT_EVENT = 1;
    }

    EventType type = 1;
    bytes payload = 2;
}

message Event{
    enum StatusCode{
        SERVICE_SHUTDOWN = 0;
        SERVICE_REGISTRY = 1;
        CONNECT_OPEN = 2;
        CONNECT_CLOSED = 3;
    }

    EventRequest.EventType type = 1;
    bytes payload = 2;
    string err_msg = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message QueryRequest{
    enum QueryType{
        LIST_SERVICES = 0; // 枚举服务
        SERVICE_SEQ = 1; // 查询服务的seq_num
    };

    QueryType type = 1;
    bytes condition = 2;
}

message QueryResult{
    repeated bytes data = 1;
}

message Respond{
    int32 status_code = 1;
    bytes payload = 2;
    string err_msg = 3;
}

message RegisterRequest{
    enum ServiceType{
        PRIVATE = 0; // 私有的服务, 不允许查询
        PUBLIC = 1; //公开的服务, 允许查询
    };

    // 注册服务地址,可以是域名或者别名
    string service_name = 1;

    // 注册的服务类型
    ServiceType type = 2;

    // 用于校验发送注册服务请求者的身份
    bytes identify_token = 3;

    // 为注册的服务设置的token，可以用于保护服务，暂时还用不到
    repeated bytes service_token = 4;
}

// The request message containing the user's name.
message ListenerRequest {
    // 由服务器返回的服务编号
    string service_sequence = 1;

    // 临时token 用于校验注册 和 监听是否一致
    bytes token = 2;
}

message ConnectNotify{
    // 本次连接请求的id, 此id由桥接服务生成，
    // grpc 客户端和服务端 连接透传服务器时
    // 携带此id 用于连接双方的对接
    string connection_id = 1;

    // 透传服务器的地址，可以用于做连接过滤
    string pass_through_addr = 2;

    // 桥接服务器的类型
    string pass_through_type = 3;

    // 是否开启tls
    bool tls_enable = 4;
}

// 桥接连接的头部
message ConnectHeader{
    string connection_id = 1;

    enum PointType{
        CLIENT = 0;
        SERVER = 1;
    }

    PointType type = 2;
}

// 桥接连接
message Connection{
    ConnectHeader header = 1;
    bytes payload = 2;
}


message ConnectRequest{
    // 请求连接的服务的序列号
    string service_sequence = 1;

    // 用于校验权限的token
    bytes verify_token = 2;
}


message Ping{
    string id = 1;
    int64 sequence_num = 2;
    google.protobuf.Timestamp timestamp = 3;
}

message Pong{
    string id = 1;
    int64 sequence_num = 2;
    google.protobuf.Timestamp timestamp = 3;
}

