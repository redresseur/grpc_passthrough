// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bridge/bridge.proto

package bridge

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceStatus_ServicesStatusCode int32

const (
	ServiceStatus_CREATE ServiceStatus_ServicesStatusCode = 0
	ServiceStatus_OFF    ServiceStatus_ServicesStatusCode = 1
	// Listen = 3;
	ServiceStatus_ON ServiceStatus_ServicesStatusCode = 2
)

var ServiceStatus_ServicesStatusCode_name = map[int32]string{
	0: "CREATE",
	1: "OFF",
	2: "ON",
}

var ServiceStatus_ServicesStatusCode_value = map[string]int32{
	"CREATE": 0,
	"OFF":    1,
	"ON":     2,
}

func (x ServiceStatus_ServicesStatusCode) String() string {
	return proto.EnumName(ServiceStatus_ServicesStatusCode_name, int32(x))
}

func (ServiceStatus_ServicesStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{0, 0}
}

type EventRequest_EventType int32

const (
	EventRequest_SERVICE_EVENT EventRequest_EventType = 0
	EventRequest_CONNECT_EVENT EventRequest_EventType = 1
)

var EventRequest_EventType_name = map[int32]string{
	0: "SERVICE_EVENT",
	1: "CONNECT_EVENT",
}

var EventRequest_EventType_value = map[string]int32{
	"SERVICE_EVENT": 0,
	"CONNECT_EVENT": 1,
}

func (x EventRequest_EventType) String() string {
	return proto.EnumName(EventRequest_EventType_name, int32(x))
}

func (EventRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{1, 0}
}

type Event_StatusCode int32

const (
	Event_SERVICE_SHUTDOWN Event_StatusCode = 0
	Event_SERVICE_REGISTRY Event_StatusCode = 1
	Event_CONNECT_OPEN     Event_StatusCode = 2
	Event_CONNECT_CLOSED   Event_StatusCode = 3
)

var Event_StatusCode_name = map[int32]string{
	0: "SERVICE_SHUTDOWN",
	1: "SERVICE_REGISTRY",
	2: "CONNECT_OPEN",
	3: "CONNECT_CLOSED",
}

var Event_StatusCode_value = map[string]int32{
	"SERVICE_SHUTDOWN": 0,
	"SERVICE_REGISTRY": 1,
	"CONNECT_OPEN":     2,
	"CONNECT_CLOSED":   3,
}

func (x Event_StatusCode) String() string {
	return proto.EnumName(Event_StatusCode_name, int32(x))
}

func (Event_StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{2, 0}
}

type QueryRequest_QueryType int32

const (
	QueryRequest_LIST_SERVICES QueryRequest_QueryType = 0
	QueryRequest_SERVICE_SEQ   QueryRequest_QueryType = 1
)

var QueryRequest_QueryType_name = map[int32]string{
	0: "LIST_SERVICES",
	1: "SERVICE_SEQ",
}

var QueryRequest_QueryType_value = map[string]int32{
	"LIST_SERVICES": 0,
	"SERVICE_SEQ":   1,
}

func (x QueryRequest_QueryType) String() string {
	return proto.EnumName(QueryRequest_QueryType_name, int32(x))
}

func (QueryRequest_QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{3, 0}
}

type RegisterRequest_ServiceType int32

const (
	RegisterRequest_PRIVATE RegisterRequest_ServiceType = 0
	RegisterRequest_PUBLIC  RegisterRequest_ServiceType = 1
)

var RegisterRequest_ServiceType_name = map[int32]string{
	0: "PRIVATE",
	1: "PUBLIC",
}

var RegisterRequest_ServiceType_value = map[string]int32{
	"PRIVATE": 0,
	"PUBLIC":  1,
}

func (x RegisterRequest_ServiceType) String() string {
	return proto.EnumName(RegisterRequest_ServiceType_name, int32(x))
}

func (RegisterRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{6, 0}
}

type ConnectHeader_PointType int32

const (
	ConnectHeader_CLIENT ConnectHeader_PointType = 0
	ConnectHeader_SERVER ConnectHeader_PointType = 1
)

var ConnectHeader_PointType_name = map[int32]string{
	0: "CLIENT",
	1: "SERVER",
}

var ConnectHeader_PointType_value = map[string]int32{
	"CLIENT": 0,
	"SERVER": 1,
}

func (x ConnectHeader_PointType) String() string {
	return proto.EnumName(ConnectHeader_PointType_name, int32(x))
}

func (ConnectHeader_PointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{9, 0}
}

type ServiceStatus struct {
	StatusCode           ServiceStatus_ServicesStatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=bridge.ServiceStatus_ServicesStatusCode" json:"status_code,omitempty"`
	Payload              []byte                           `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ServiceStatus) Reset()         { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()    {}
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{0}
}

func (m *ServiceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceStatus.Unmarshal(m, b)
}
func (m *ServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceStatus.Marshal(b, m, deterministic)
}
func (m *ServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatus.Merge(m, src)
}
func (m *ServiceStatus) XXX_Size() int {
	return xxx_messageInfo_ServiceStatus.Size(m)
}
func (m *ServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatus proto.InternalMessageInfo

func (m *ServiceStatus) GetStatusCode() ServiceStatus_ServicesStatusCode {
	if m != nil {
		return m.StatusCode
	}
	return ServiceStatus_CREATE
}

func (m *ServiceStatus) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type EventRequest struct {
	Type                 EventRequest_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=bridge.EventRequest_EventType" json:"type,omitempty"`
	Payload              []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{1}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetType() EventRequest_EventType {
	if m != nil {
		return m.Type
	}
	return EventRequest_SERVICE_EVENT
}

func (m *EventRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Event struct {
	Type                 EventRequest_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=bridge.EventRequest_EventType" json:"type,omitempty"`
	Payload              []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ErrMsg               string                 `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	Timestamp            *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{2}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventRequest_EventType {
	if m != nil {
		return m.Type
	}
	return EventRequest_SERVICE_EVENT
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *Event) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type QueryRequest struct {
	Type                 QueryRequest_QueryType `protobuf:"varint,1,opt,name=type,proto3,enum=bridge.QueryRequest_QueryType" json:"type,omitempty"`
	Condition            []byte                 `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{3}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetType() QueryRequest_QueryType {
	if m != nil {
		return m.Type
	}
	return QueryRequest_LIST_SERVICES
}

func (m *QueryRequest) GetCondition() []byte {
	if m != nil {
		return m.Condition
	}
	return nil
}

type QueryResult struct {
	Data                 [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{4}
}

func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (m *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(m, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Respond struct {
	StatusCode           int32    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ErrMsg               string   `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Respond) Reset()         { *m = Respond{} }
func (m *Respond) String() string { return proto.CompactTextString(m) }
func (*Respond) ProtoMessage()    {}
func (*Respond) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{5}
}

func (m *Respond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Respond.Unmarshal(m, b)
}
func (m *Respond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Respond.Marshal(b, m, deterministic)
}
func (m *Respond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Respond.Merge(m, src)
}
func (m *Respond) XXX_Size() int {
	return xxx_messageInfo_Respond.Size(m)
}
func (m *Respond) XXX_DiscardUnknown() {
	xxx_messageInfo_Respond.DiscardUnknown(m)
}

var xxx_messageInfo_Respond proto.InternalMessageInfo

func (m *Respond) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Respond) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Respond) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type RegisterRequest struct {
	// 注册服务地址,可以是域名或者别名
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// 注册的服务类型
	Type RegisterRequest_ServiceType `protobuf:"varint,2,opt,name=type,proto3,enum=bridge.RegisterRequest_ServiceType" json:"type,omitempty"`
	// 用于校验发送注册服务请求者的身份
	IdentifyToken []byte `protobuf:"bytes,3,opt,name=identify_token,json=identifyToken,proto3" json:"identify_token,omitempty"`
	// 为注册的服务设置的token，可以用于保护服务，暂时还用不到
	ServiceToken         [][]byte `protobuf:"bytes,4,rep,name=service_token,json=serviceToken,proto3" json:"service_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{6}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RegisterRequest) GetType() RegisterRequest_ServiceType {
	if m != nil {
		return m.Type
	}
	return RegisterRequest_PRIVATE
}

func (m *RegisterRequest) GetIdentifyToken() []byte {
	if m != nil {
		return m.IdentifyToken
	}
	return nil
}

func (m *RegisterRequest) GetServiceToken() [][]byte {
	if m != nil {
		return m.ServiceToken
	}
	return nil
}

// The request message containing the user's name.
type ListenerRequest struct {
	// 由服务器返回的服务编号
	ServiceSequence string `protobuf:"bytes,1,opt,name=service_sequence,json=serviceSequence,proto3" json:"service_sequence,omitempty"`
	// 临时token 用于校验注册 和 监听是否一致
	Token                []byte   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenerRequest) Reset()         { *m = ListenerRequest{} }
func (m *ListenerRequest) String() string { return proto.CompactTextString(m) }
func (*ListenerRequest) ProtoMessage()    {}
func (*ListenerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{7}
}

func (m *ListenerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenerRequest.Unmarshal(m, b)
}
func (m *ListenerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenerRequest.Marshal(b, m, deterministic)
}
func (m *ListenerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerRequest.Merge(m, src)
}
func (m *ListenerRequest) XXX_Size() int {
	return xxx_messageInfo_ListenerRequest.Size(m)
}
func (m *ListenerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerRequest proto.InternalMessageInfo

func (m *ListenerRequest) GetServiceSequence() string {
	if m != nil {
		return m.ServiceSequence
	}
	return ""
}

func (m *ListenerRequest) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type ConnectNotify struct {
	// 本次连接请求的id, 此id由桥接服务生成，
	// grpc 客户端和服务端 连接透传服务器时
	// 携带此id 用于连接双方的对接
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// 透传服务器的地址，可以用于做连接过滤
	PassThroughAddr string `protobuf:"bytes,2,opt,name=pass_through_addr,json=passThroughAddr,proto3" json:"pass_through_addr,omitempty"`
	// 桥接服务器的类型
	PassThroughType string `protobuf:"bytes,3,opt,name=pass_through_type,json=passThroughType,proto3" json:"pass_through_type,omitempty"`
	// 是否开启tls
	TlsEnable            bool     `protobuf:"varint,4,opt,name=tls_enable,json=tlsEnable,proto3" json:"tls_enable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectNotify) Reset()         { *m = ConnectNotify{} }
func (m *ConnectNotify) String() string { return proto.CompactTextString(m) }
func (*ConnectNotify) ProtoMessage()    {}
func (*ConnectNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{8}
}

func (m *ConnectNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectNotify.Unmarshal(m, b)
}
func (m *ConnectNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectNotify.Marshal(b, m, deterministic)
}
func (m *ConnectNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectNotify.Merge(m, src)
}
func (m *ConnectNotify) XXX_Size() int {
	return xxx_messageInfo_ConnectNotify.Size(m)
}
func (m *ConnectNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectNotify.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectNotify proto.InternalMessageInfo

func (m *ConnectNotify) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *ConnectNotify) GetPassThroughAddr() string {
	if m != nil {
		return m.PassThroughAddr
	}
	return ""
}

func (m *ConnectNotify) GetPassThroughType() string {
	if m != nil {
		return m.PassThroughType
	}
	return ""
}

func (m *ConnectNotify) GetTlsEnable() bool {
	if m != nil {
		return m.TlsEnable
	}
	return false
}

// 桥接连接的头部
type ConnectHeader struct {
	ConnectionId         string                  `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Type                 ConnectHeader_PointType `protobuf:"varint,2,opt,name=type,proto3,enum=bridge.ConnectHeader_PointType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ConnectHeader) Reset()         { *m = ConnectHeader{} }
func (m *ConnectHeader) String() string { return proto.CompactTextString(m) }
func (*ConnectHeader) ProtoMessage()    {}
func (*ConnectHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{9}
}

func (m *ConnectHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectHeader.Unmarshal(m, b)
}
func (m *ConnectHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectHeader.Marshal(b, m, deterministic)
}
func (m *ConnectHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectHeader.Merge(m, src)
}
func (m *ConnectHeader) XXX_Size() int {
	return xxx_messageInfo_ConnectHeader.Size(m)
}
func (m *ConnectHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectHeader proto.InternalMessageInfo

func (m *ConnectHeader) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *ConnectHeader) GetType() ConnectHeader_PointType {
	if m != nil {
		return m.Type
	}
	return ConnectHeader_CLIENT
}

// 桥接连接
type Connection struct {
	Header               *ConnectHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Payload              []byte         `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{10}
}

func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (m *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(m, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetHeader() *ConnectHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Connection) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ConnectRequest struct {
	// 请求连接的服务的序列号
	ServiceSequence string `protobuf:"bytes,1,opt,name=service_sequence,json=serviceSequence,proto3" json:"service_sequence,omitempty"`
	// 用于校验权限的token
	VerifyToken          []byte   `protobuf:"bytes,2,opt,name=verify_token,json=verifyToken,proto3" json:"verify_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{11}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetServiceSequence() string {
	if m != nil {
		return m.ServiceSequence
	}
	return ""
}

func (m *ConnectRequest) GetVerifyToken() []byte {
	if m != nil {
		return m.VerifyToken
	}
	return nil
}

type Ping struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SequenceNum          int64                `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{12}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ping) GetSequenceNum() int64 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func (m *Ping) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Pong struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SequenceNum          int64                `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_e70602ae9c4e311d, []int{13}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pong) GetSequenceNum() int64 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func (m *Pong) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterEnum("bridge.ServiceStatus_ServicesStatusCode", ServiceStatus_ServicesStatusCode_name, ServiceStatus_ServicesStatusCode_value)
	proto.RegisterEnum("bridge.EventRequest_EventType", EventRequest_EventType_name, EventRequest_EventType_value)
	proto.RegisterEnum("bridge.Event_StatusCode", Event_StatusCode_name, Event_StatusCode_value)
	proto.RegisterEnum("bridge.QueryRequest_QueryType", QueryRequest_QueryType_name, QueryRequest_QueryType_value)
	proto.RegisterEnum("bridge.RegisterRequest_ServiceType", RegisterRequest_ServiceType_name, RegisterRequest_ServiceType_value)
	proto.RegisterEnum("bridge.ConnectHeader_PointType", ConnectHeader_PointType_name, ConnectHeader_PointType_value)
	proto.RegisterType((*ServiceStatus)(nil), "bridge.ServiceStatus")
	proto.RegisterType((*EventRequest)(nil), "bridge.EventRequest")
	proto.RegisterType((*Event)(nil), "bridge.Event")
	proto.RegisterType((*QueryRequest)(nil), "bridge.QueryRequest")
	proto.RegisterType((*QueryResult)(nil), "bridge.QueryResult")
	proto.RegisterType((*Respond)(nil), "bridge.Respond")
	proto.RegisterType((*RegisterRequest)(nil), "bridge.RegisterRequest")
	proto.RegisterType((*ListenerRequest)(nil), "bridge.ListenerRequest")
	proto.RegisterType((*ConnectNotify)(nil), "bridge.ConnectNotify")
	proto.RegisterType((*ConnectHeader)(nil), "bridge.ConnectHeader")
	proto.RegisterType((*Connection)(nil), "bridge.Connection")
	proto.RegisterType((*ConnectRequest)(nil), "bridge.ConnectRequest")
	proto.RegisterType((*Ping)(nil), "bridge.Ping")
	proto.RegisterType((*Pong)(nil), "bridge.Pong")
}

func init() { proto.RegisterFile("bridge/bridge.proto", fileDescriptor_e70602ae9c4e311d) }

var fileDescriptor_e70602ae9c4e311d = []byte{
	// 935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x6d, 0xd2, 0x9c, 0x38, 0x89, 0x77, 0x28, 0x6c, 0x14, 0x01, 0x4d, 0xa7, 0x02,
	0x05, 0x24, 0xd2, 0x25, 0x8b, 0xc4, 0xde, 0x80, 0xb4, 0x9b, 0xf5, 0xb2, 0x91, 0x42, 0x92, 0x9d,
	0xb8, 0x45, 0x5c, 0xb0, 0x96, 0x1b, 0xcf, 0xa6, 0x16, 0x89, 0x27, 0x78, 0x26, 0x95, 0xf2, 0x06,
	0x5c, 0x81, 0x78, 0x0a, 0x2e, 0x78, 0x1c, 0x9e, 0x80, 0x37, 0x41, 0x9e, 0xf1, 0xc4, 0x49, 0xdb,
	0x2d, 0x0b, 0x42, 0x7b, 0x65, 0x9f, 0xcf, 0xdf, 0x9c, 0xf3, 0xcd, 0xf9, 0x33, 0xbc, 0x73, 0x11,
	0x87, 0xc1, 0x8c, 0x9d, 0xea, 0x47, 0x67, 0x19, 0x73, 0xc9, 0x71, 0x51, 0x5b, 0xcd, 0xa3, 0x19,
	0xe7, 0xb3, 0x39, 0x3b, 0x55, 0xe8, 0xc5, 0xea, 0xd5, 0xa9, 0x0c, 0x17, 0x4c, 0x48, 0x7f, 0xb1,
	0xd4, 0x44, 0xf2, 0x3b, 0x82, 0xea, 0x84, 0xc5, 0x57, 0xe1, 0x94, 0x4d, 0xa4, 0x2f, 0x57, 0x02,
	0xf7, 0xa1, 0x22, 0xd4, 0x9b, 0x37, 0xe5, 0x01, 0x6b, 0xa0, 0x16, 0x6a, 0xd7, 0xba, 0xed, 0x4e,
	0xea, 0x7e, 0x87, 0x6b, 0x2c, 0xa1, 0xcd, 0x1e, 0x0f, 0x18, 0x05, 0xb1, 0x79, 0xc7, 0x0d, 0x28,
	0x2d, 0xfd, 0xf5, 0x9c, 0xfb, 0x41, 0x23, 0xdf, 0x42, 0x6d, 0x8b, 0x1a, 0x93, 0x7c, 0x0e, 0xf8,
	0xe6, 0x59, 0x0c, 0x50, 0xec, 0x51, 0xe7, 0xb1, 0xeb, 0xd8, 0x39, 0x5c, 0x82, 0xc2, 0xe8, 0xd9,
	0x33, 0x1b, 0xe1, 0x22, 0xe4, 0x47, 0x43, 0x3b, 0x4f, 0x7e, 0x45, 0x60, 0x39, 0x57, 0x2c, 0x92,
	0x94, 0xfd, 0xb4, 0x62, 0x42, 0xe2, 0x2e, 0xec, 0xc9, 0xf5, 0xd2, 0x28, 0xfc, 0xd0, 0x28, 0xdc,
	0xe6, 0x68, 0xc3, 0x5d, 0x2f, 0x19, 0x55, 0xdc, 0x3b, 0x15, 0x95, 0x37, 0x64, 0x7c, 0x0f, 0xaa,
	0x13, 0x87, 0x9e, 0xf7, 0x7b, 0x8e, 0xe7, 0x9c, 0x3b, 0x43, 0xd7, 0xce, 0x25, 0x50, 0x6f, 0x34,
	0x1c, 0x3a, 0x3d, 0x37, 0x85, 0x10, 0xf9, 0x39, 0x0f, 0xfb, 0xea, 0xcc, 0xff, 0x2b, 0x05, 0xdf,
	0x87, 0x12, 0x8b, 0x63, 0x6f, 0x21, 0x66, 0x8d, 0x42, 0x0b, 0xb5, 0xcb, 0xb4, 0xc8, 0xe2, 0xf8,
	0x5b, 0x31, 0xc3, 0x8f, 0xa0, 0xbc, 0xa9, 0x5f, 0x63, 0xaf, 0x85, 0xda, 0x95, 0x6e, 0xb3, 0xa3,
	0x2b, 0xdc, 0x31, 0x15, 0xee, 0xb8, 0x86, 0x41, 0x33, 0x32, 0x79, 0x09, 0xb0, 0x95, 0xe7, 0x43,
	0xb0, 0xcd, 0xf5, 0x26, 0xcf, 0xcf, 0xdc, 0xa7, 0xa3, 0xef, 0x86, 0x76, 0x6e, 0x1b, 0xa5, 0xce,
	0x37, 0xfd, 0x89, 0x4b, 0xbf, 0xb7, 0x11, 0xb6, 0xc1, 0x32, 0xf7, 0x1e, 0x8d, 0x9d, 0xa1, 0x9d,
	0xc7, 0x18, 0x6a, 0x06, 0xe9, 0x0d, 0x46, 0x13, 0xe7, 0xa9, 0x5d, 0x20, 0xbf, 0x21, 0xb0, 0x5e,
	0xac, 0x58, 0xbc, 0xfe, 0x87, 0xe2, 0x6c, 0x73, 0xb4, 0xb1, 0x95, 0x91, 0xf7, 0xa1, 0x3c, 0xe5,
	0x51, 0x10, 0xca, 0x90, 0x47, 0x69, 0x4e, 0x32, 0x80, 0x9c, 0x42, 0x79, 0x73, 0x20, 0xa9, 0xc6,
	0xa0, 0x3f, 0x71, 0xbd, 0x54, 0xf0, 0xc4, 0xce, 0xe1, 0x3a, 0x54, 0x36, 0x97, 0x72, 0x5e, 0xd8,
	0x88, 0x1c, 0x43, 0x25, 0x0d, 0x27, 0x56, 0x73, 0x89, 0x31, 0xec, 0x05, 0xbe, 0xf4, 0x1b, 0xa8,
	0x55, 0x68, 0x5b, 0x54, 0xbd, 0x93, 0x1f, 0xa0, 0x44, 0x99, 0x58, 0xf2, 0x28, 0xc0, 0x47, 0x37,
	0xdb, 0x7e, 0xff, 0xcd, 0x9a, 0xf9, 0xb5, 0xf5, 0x22, 0x7f, 0x21, 0xa8, 0x53, 0x36, 0x0b, 0x85,
	0x64, 0xb1, 0x49, 0xcc, 0x31, 0x58, 0x42, 0x77, 0xbe, 0x17, 0xf9, 0x0b, 0x1d, 0xa8, 0x4c, 0x2b,
	0x29, 0x36, 0xf4, 0x17, 0x0c, 0x7f, 0x99, 0xe6, 0x2e, 0xaf, 0x72, 0x77, 0x62, 0x72, 0x77, 0xcd,
	0x93, 0x19, 0xbe, 0xad, 0x04, 0x7e, 0x04, 0xb5, 0x30, 0x60, 0x91, 0x0c, 0x5f, 0xad, 0x3d, 0xc9,
	0x7f, 0x64, 0x91, 0xd2, 0x63, 0xd1, 0xaa, 0x41, 0xdd, 0x04, 0xc4, 0x27, 0x50, 0x35, 0x12, 0x34,
	0x6b, 0x4f, 0xa5, 0xc4, 0xe8, 0x52, 0x24, 0xf2, 0x31, 0x54, 0xb6, 0x02, 0xe0, 0x0a, 0x94, 0xc6,
	0xb4, 0x7f, 0xae, 0x67, 0x13, 0xa0, 0x38, 0x3e, 0x7b, 0x32, 0xe8, 0xf7, 0x6c, 0x44, 0x28, 0xd4,
	0x07, 0x89, 0xac, 0x28, 0xbb, 0xe2, 0x27, 0x60, 0x1b, 0xff, 0x22, 0x81, 0xa2, 0xa9, 0xb9, 0x66,
	0x3d, 0xc5, 0x27, 0x29, 0x8c, 0x0f, 0x61, 0x5f, 0x4b, 0xd0, 0x29, 0xd5, 0x06, 0xf9, 0x03, 0x41,
	0xb5, 0xc7, 0xa3, 0x88, 0x4d, 0xe5, 0x90, 0x27, 0xba, 0x13, 0xc9, 0x53, 0x0d, 0x84, 0x3c, 0xf2,
	0xc2, 0x20, 0xf5, 0x67, 0x65, 0x60, 0x3f, 0xc0, 0x9f, 0xc2, 0xbd, 0xa5, 0x2f, 0x84, 0x27, 0x2f,
	0x63, 0xbe, 0x9a, 0x5d, 0x7a, 0x7e, 0x10, 0xc4, 0xca, 0x71, 0x99, 0xd6, 0x93, 0x0f, 0xae, 0xc6,
	0x1f, 0x07, 0x41, 0x7c, 0x83, 0xab, 0x12, 0x5e, 0xb8, 0xc1, 0x55, 0x77, 0xff, 0x00, 0x40, 0xce,
	0x85, 0xc7, 0x22, 0xff, 0x62, 0xce, 0xd4, 0xdc, 0x1d, 0xd0, 0xb2, 0x9c, 0x0b, 0x47, 0x01, 0xe4,
	0x97, 0x4c, 0xed, 0x73, 0xe6, 0x07, 0x2c, 0x7e, 0x33, 0xb5, 0x0f, 0x77, 0xaa, 0x7c, 0x64, 0xaa,
	0xbc, 0xe3, 0xa9, 0x33, 0xe6, 0xe1, 0xf6, 0xd2, 0x20, 0x27, 0x50, 0xde, 0x40, 0x6a, 0x5d, 0x0e,
	0xfa, 0x7a, 0x3d, 0x01, 0x14, 0x93, 0xee, 0x77, 0xa8, 0x8d, 0xc8, 0x19, 0x40, 0x6f, 0x13, 0x09,
	0x7f, 0x06, 0xc5, 0x4b, 0xe5, 0x4c, 0xa9, 0xa8, 0x74, 0xdf, 0xbd, 0x35, 0x12, 0x4d, 0x49, 0x77,
	0x6c, 0xc8, 0x97, 0x50, 0x4b, 0x8f, 0xfc, 0x87, 0x42, 0x1f, 0x83, 0x75, 0xc5, 0xe2, 0xac, 0x31,
	0xb5, 0xef, 0x8a, 0xc6, 0x74, 0xc7, 0x09, 0xd8, 0x1b, 0x87, 0xd1, 0x0c, 0xd7, 0x20, 0xbf, 0x49,
	0x59, 0x3e, 0x0c, 0xf4, 0xc4, 0x68, 0x37, 0x5e, 0xb4, 0x5a, 0xa8, 0xa3, 0x85, 0x64, 0x62, 0x34,
	0x36, 0x5c, 0x2d, 0x76, 0x17, 0x63, 0xe1, 0xdf, 0x2c, 0xc6, 0x24, 0x28, 0x7f, 0xcb, 0x41, 0xbb,
	0x7f, 0xe6, 0xa1, 0xf8, 0x44, 0x15, 0x01, 0x7f, 0x95, 0x6d, 0x88, 0x74, 0xdc, 0xf0, 0xfd, 0xd7,
	0x0c, 0x7c, 0xb3, 0x9e, 0x7d, 0x50, 0x3b, 0x8b, 0xe4, 0xf0, 0xd7, 0x70, 0x60, 0xa6, 0x2f, 0x3b,
	0x77, 0x6d, 0x1e, 0x9b, 0xd7, 0x2b, 0xae, 0x67, 0x8a, 0xe4, 0x1e, 0x20, 0xfc, 0x05, 0x94, 0x52,
	0x10, 0xbf, 0x77, 0x8d, 0x75, 0x47, 0xd4, 0x47, 0x50, 0x35, 0xda, 0xf4, 0xff, 0xef, 0xf0, 0xb6,
	0x3f, 0x5e, 0xb3, 0xba, 0x83, 0xaa, 0x78, 0x0f, 0x60, 0x5f, 0xed, 0xe4, 0xec, 0xc4, 0xf6, 0x1f,
	0xe1, 0xb6, 0x58, 0x6d, 0x38, 0x48, 0xba, 0x42, 0x15, 0xc9, 0x32, 0x9f, 0x13, 0xa4, 0x99, 0x59,
	0x3c, 0x9a, 0x91, 0xdc, 0x45, 0x51, 0x25, 0xfd, 0xe1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x26,
	0x01, 0x08, 0x6c, 0x11, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BridgeClient interface {
	// 注册一个服务
	RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Respond, error)
	// 开启监听服务
	Listener(ctx context.Context, in *ListenerRequest, opts ...grpc.CallOption) (Bridge_ListenerClient, error)
	// 请求连接
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Respond, error)
	// 注册连接状态监听
	RegisterEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (Bridge_RegisterEventClient, error)
	// 查询服务
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*Respond, error)
	// 用于检测连接状态
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type bridgeClient struct {
	cc *grpc.ClientConn
}

func NewBridgeClient(cc *grpc.ClientConn) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/bridge.Bridge/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) Listener(ctx context.Context, in *ListenerRequest, opts ...grpc.CallOption) (Bridge_ListenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bridge_serviceDesc.Streams[0], "/bridge.Bridge/Listener", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeListenerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bridge_ListenerClient interface {
	Recv() (*ConnectNotify, error)
	grpc.ClientStream
}

type bridgeListenerClient struct {
	grpc.ClientStream
}

func (x *bridgeListenerClient) Recv() (*ConnectNotify, error) {
	m := new(ConnectNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/bridge.Bridge/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) RegisterEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (Bridge_RegisterEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bridge_serviceDesc.Streams[1], "/bridge.Bridge/RegisterEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeRegisterEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bridge_RegisterEventClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type bridgeRegisterEventClient struct {
	grpc.ClientStream
}

func (x *bridgeRegisterEventClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/bridge.Bridge/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/bridge.Bridge/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
type BridgeServer interface {
	// 注册一个服务
	RegisterService(context.Context, *RegisterRequest) (*Respond, error)
	// 开启监听服务
	Listener(*ListenerRequest, Bridge_ListenerServer) error
	// 请求连接
	Connect(context.Context, *ConnectRequest) (*Respond, error)
	// 注册连接状态监听
	RegisterEvent(*EventRequest, Bridge_RegisterEventServer) error
	// 查询服务
	Query(context.Context, *QueryRequest) (*Respond, error)
	// 用于检测连接状态
	PingPong(context.Context, *Ping) (*Pong, error)
}

func RegisterBridgeServer(s *grpc.Server, srv BridgeServer) {
	s.RegisterService(&_Bridge_serviceDesc, srv)
}

func _Bridge_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.Bridge/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).RegisterService(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_Listener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServer).Listener(m, &bridgeListenerServer{stream})
}

type Bridge_ListenerServer interface {
	Send(*ConnectNotify) error
	grpc.ServerStream
}

type bridgeListenerServer struct {
	grpc.ServerStream
}

func (x *bridgeListenerServer) Send(m *ConnectNotify) error {
	return x.ServerStream.SendMsg(m)
}

func _Bridge_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.Bridge/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_RegisterEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServer).RegisterEvent(m, &bridgeRegisterEventServer{stream})
}

type Bridge_RegisterEventServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type bridgeRegisterEventServer struct {
	grpc.ServerStream
}

func (x *bridgeRegisterEventServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Bridge_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.Bridge/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.Bridge/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bridge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _Bridge_RegisterService_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Bridge_Connect_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Bridge_Query_Handler,
		},
		{
			MethodName: "PingPong",
			Handler:    _Bridge_PingPong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listener",
			Handler:       _Bridge_Listener_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegisterEvent",
			Handler:       _Bridge_RegisterEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge/bridge.proto",
}
